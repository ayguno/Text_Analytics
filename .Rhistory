axis.text = element_text(size = 15, face = "bold", colour = "navy"),
axis.title = element_text(size = 15, face = "bold", colour = "navy"),
plot.title = element_text(size = 18, face = "bold", colour = "navy", hjust = 0.5),
panel.background = element_blank(),
panel.border = element_rect(color = "navy", fill = NA),
panel.grid.major.x = element_blank(),
strip.background = element_rect(fill = "purple4"),
strip.text = element_text(color = "white", size = 12)
)
training = combined_set[combined_set$set == "Training",]
ggplot(training, aes(x = DECISIONTIME))+
geom_histogram(fill = "navy", binwidth = 5) +
xlab("Decision time")+
ylab("Count")+
ggtitle("Training set")+
geom_vline(xintercept = median(training$DECISIONTIME), color = "magenta", linetype = "dashed", size = 1.2)+
geom_text(y = 1000, x = 500, label = paste0("Median: ", median(training$DECISIONTIME),"\n",
"n = ", nrow(training)),
size = 6, color = "navy")+
ylim(0,2200)+
theme(
axis.text = element_text(size = 15, face = "bold", colour = "navy"),
axis.title = element_text(size = 15, face = "bold", colour = "navy"),
plot.title = element_text(size = 18, face = "bold", colour = "navy", hjust = 0.5),
panel.background = element_blank(),
panel.border = element_rect(color = "navy", fill = NA),
panel.grid.major.x = element_blank(),
strip.background = element_rect(fill = "purple4"),
strip.text = element_text(color = "white", size = 12)
)
validation = combined_set[combined_set$set == "Validation",]
ggplot(validation, aes(x = DECISIONTIME))+
geom_histogram(fill = "navy", binwidth = 5) +
xlab("Decision time")+
ylab("Count")+
ggtitle("Validation set")+
geom_vline(xintercept = median(validation$DECISIONTIME), color = "magenta", linetype = "dashed", size = 1.2)+
geom_text(y = 1000, x = 500, label = paste0("Median: ", median(validation$DECISIONTIME),"\n",
"n = ", nrow(validation)),
size = 6, color = "navy")+
ylim(0,2200)+
theme(
axis.text = element_text(size = 15, face = "bold", colour = "navy"),
axis.title = element_text(size = 15, face = "bold", colour = "navy"),
plot.title = element_text(size = 18, face = "bold", colour = "navy", hjust = 0.5),
panel.background = element_blank(),
panel.border = element_rect(color = "navy", fill = NA),
panel.grid.major.x = element_blank(),
strip.background = element_rect(fill = "purple4"),
strip.text = element_text(color = "white", size = 12)
)
library(ggplot2)
y_train$set <- "Training"
y_val$set <- "Validation"
combined_set <- rbind(y_train,y_val)
ggplot(combined_set, aes(x = set,y = DECISIONTIME))+
geom_boxplot(fill = "navy", color = "magenta")+
xlab("Data set")+
ylab("Decision time")+
theme(
axis.text = element_text(size = 15, face = "bold", colour = "navy"),
axis.title = element_text(size = 15, face = "bold", colour = "navy"),
plot.title = element_text(size = 18, face = "bold", colour = "navy", hjust = 0.5),
panel.background = element_blank(),
panel.border = element_rect(color = "navy", fill = NA),
panel.grid.major.x = element_blank(),
strip.background = element_rect(fill = "purple4"),
strip.text = element_text(color = "white", size = 12)
)+
coord_flip()
training = combined_set[combined_set$set == "Training",]
ggplot(training, aes(x = DECISIONTIME))+
geom_histogram(fill = "navy", binwidth = 5) +
xlab("Decision time")+
ylab("Count")+
ggtitle("Training set")+
geom_vline(xintercept = median(training$DECISIONTIME), color = "magenta", linetype = "dashed", size = 1.2)+
geom_text(y = 1000, x = 500, label = paste0("Median: ", median(training$DECISIONTIME),"\n",
"n = ", nrow(training)),
size = 6, color = "navy")+
ylim(0,2200)+
theme(
axis.text = element_text(size = 15, face = "bold", colour = "navy"),
axis.title = element_text(size = 15, face = "bold", colour = "navy"),
plot.title = element_text(size = 18, face = "bold", colour = "navy", hjust = 0.5),
panel.background = element_blank(),
panel.border = element_rect(color = "navy", fill = NA),
panel.grid.major.x = element_blank(),
strip.background = element_rect(fill = "purple4"),
strip.text = element_text(color = "white", size = 12)
)
validation = combined_set[combined_set$set == "Validation",]
ggplot(validation, aes(x = DECISIONTIME))+
geom_histogram(fill = "navy", binwidth = 5) +
xlab("Decision time")+
ylab("Count")+
ggtitle("Validation set")+
geom_vline(xintercept = median(validation$DECISIONTIME), color = "magenta", linetype = "dashed", size = 1.2)+
geom_text(y = 1000, x = 500, label = paste0("Median: ", median(validation$DECISIONTIME),"\n",
"n = ", nrow(validation)),
size = 6, color = "navy")+
ylim(0,2200)+
theme(
axis.text = element_text(size = 15, face = "bold", colour = "navy"),
axis.title = element_text(size = 15, face = "bold", colour = "navy"),
plot.title = element_text(size = 18, face = "bold", colour = "navy", hjust = 0.5),
panel.background = element_blank(),
panel.border = element_rect(color = "navy", fill = NA),
panel.grid.major.x = element_blank(),
strip.background = element_rect(fill = "purple4"),
strip.text = element_text(color = "white", size = 12)
)
knitr::opts_chunk$set(results = "markup", fig.align = "center",
fig.height= 8, fig.width= 8,message=FALSE,warning=FALSE)
# Load predictions from 4 models we saved in Jupyter notebook
target_predictions <- read.csv("target_predictions.csv", stringsAsFactors = F, header = TRUE)
View(target_predictions)
abs(90 - target_predictions$y_val)
median(abs(90 - target_predictions$y_val))
median(abs(target_predictions$preds_lgbm))
median(abs(target_predictions$y_val-target_predictions$preds_lgbm))
median(abs(88 - target_predictions$y_val))
median(abs(90 - target_predictions$y_val))
median(abs(target_predictions$y_val-target_predictions$preds_lgbm))
51-28.8
knitr::opts_chunk$set(results = "markup", fig.align = "center",
fig.height= 8, fig.width= 8,message=FALSE,warning=FALSE)
y_train <- read.csv("y_train.csv", stringsAsFactors = FALSE)
y_val <- read.csv("y_val.csv", stringsAsFactors = FALSE)
library(ggplot2)
y_train$set <- "Training"
y_val$set <- "Validation"
combined_set <- rbind(y_train,y_val)
ggplot(combined_set, aes(x = set,y = DECISIONTIME))+
geom_boxplot(fill = "navy", color = "magenta")+
xlab("Data set")+
ylab("Decision time")+
theme(
axis.text = element_text(size = 15, face = "bold", colour = "navy"),
axis.title = element_text(size = 15, face = "bold", colour = "navy"),
plot.title = element_text(size = 18, face = "bold", colour = "navy", hjust = 0.5),
panel.background = element_blank(),
panel.border = element_rect(color = "navy", fill = NA),
panel.grid.major.x = element_blank(),
strip.background = element_rect(fill = "purple4"),
strip.text = element_text(color = "white", size = 12)
)+
coord_flip()
training = combined_set[combined_set$set == "Training",]
ggplot(training, aes(x = DECISIONTIME))+
geom_histogram(fill = "navy", binwidth = 5) +
xlab("Decision time")+
ylab("Count")+
ggtitle("Training set")+
geom_vline(xintercept = median(training$DECISIONTIME), color = "magenta", linetype = "dashed", size = 1.2)+
geom_text(y = 1000, x = 500, label = paste0("Median: ", median(training$DECISIONTIME),"\n",
"n = ", nrow(training)),
size = 6, color = "navy")+
ylim(0,2200)+
theme(
axis.text = element_text(size = 15, face = "bold", colour = "navy"),
axis.title = element_text(size = 15, face = "bold", colour = "navy"),
plot.title = element_text(size = 18, face = "bold", colour = "navy", hjust = 0.5),
panel.background = element_blank(),
panel.border = element_rect(color = "navy", fill = NA),
panel.grid.major.x = element_blank(),
strip.background = element_rect(fill = "purple4"),
strip.text = element_text(color = "white", size = 12)
)
validation = combined_set[combined_set$set == "Validation",]
ggplot(validation, aes(x = DECISIONTIME))+
geom_histogram(fill = "navy", binwidth = 5) +
xlab("Decision time")+
ylab("Count")+
ggtitle("Validation set")+
geom_vline(xintercept = median(validation$DECISIONTIME), color = "magenta", linetype = "dashed", size = 1.2)+
geom_text(y = 1000, x = 500, label = paste0("Median: ", median(validation$DECISIONTIME),"\n",
"n = ", nrow(validation)),
size = 6, color = "navy")+
ylim(0,2200)+
theme(
axis.text = element_text(size = 15, face = "bold", colour = "navy"),
axis.title = element_text(size = 15, face = "bold", colour = "navy"),
plot.title = element_text(size = 18, face = "bold", colour = "navy", hjust = 0.5),
panel.background = element_blank(),
panel.border = element_rect(color = "navy", fill = NA),
panel.grid.major.x = element_blank(),
strip.background = element_rect(fill = "purple4"),
strip.text = element_text(color = "white", size = 12)
)
# Load predictions from 4 models we saved in Jupyter notebook
target_predictions <- read.csv("target_predictions.csv", stringsAsFactors = F, header = TRUE)
median(abs(90 - target_predictions$y_val))
median(abs(target_predictions$y_val-target_predictions$preds_lgbm))
28.87/51
1-28.87/51
install.packages('FrF2')
library('FrF2')
FrF2(nruns = 8, nfactors = 4)
FrF2(nruns = 16, nfactors = 4)
splitplot(FrF2(nruns = 16, nfactors = 4))
FrF2(8,factor.names=list(temp="",press="",material="",state=""))
## finding smallest design with resolution 5 in 7 factors
FrF2(nfactors=7, resolution=5)
## finding smallest design with resolution 5 in 7 factors
FrF2(10,nfactors=7, resolution=5)
## finding smallest design with resolution 5 in 7 factors
FrF2(nfactors=7, resolution=5)
## finding smallest design with resolution 5 in 7 factors
FrF2(nfactors=7, resolution=5, replications = 16)
knitr::opts_chunk$set(results = "markup", fig.align = "center",
fig.height= 8, fig.width= 8,message=FALSE,warning=FALSE)
10 ^ 16
signif(10 ^ 16,5)
signif(10 ^ 16,16)
signif(10 ^ 16,20)
round(10 ^ 16,20)
10 ^ 16
library(FrF2)
experiment <- FrF2(16, 6, randomize = FALSE)
summary(experiment)
library(FrF2)
experiment <- FrF2(16, 10, randomize = FALSE)
summary(experiment)
plot(experiment)
plot(experiment$J)
IAPlot(experiment)
View(experiment)
type(experiment)
class(experiment)
apply(experiment,2,sum)
apply(sum,2,experiment)
apply(sum,2,experiment)
apply(experiment,2,sum)
apply(as.data.frame(experiment),2,sum)
experiment
experiment$design
design.info(experiment)
design(experiment)
design.info(experiment)
desnum(experiment)
apply(desnum(experiment),2,sum)
desnum(experiment)
as.matrix(desnum(experiment))
apply(as.matrix(desnum(experiment)),2,sum)
# Note that desnum extracts the design matrix from the design object
desnum(experiment)
apply(desnum(experiment),2,sum)
combn(seq("A","K"),2)
letters
LETTERS
combn(LETTERS[1:10],2)
unlist(combn(LETTERS[1:10],2))
exp_pairs <- combn(LETTERS[1:10],2)
exp_pairs
View(exp_pairs)
ifelse(1,0,desnum(experiment) == 1)
pair_sums <- NULL
for (i in seq_along(ncol(exp_pairs))){
pair_sums_current = 0
# Look for each experiment
for (j in seq_along(nrow(desnum(experiment)))){
el1 <- which(colnames(desnum(experiment)) == exp_pairs[1,i])
el2 <- which(colnames(desnum(experiment)) == exp_pairs[1,i])
if (desnum(experiment)[j,el1] == 1 & desnum(experiment)[j,el2] == 1){
pair_sums_current = pair_sums_current + 1
}
}
pair_sums <- c(pair_sums,pair_sums_current)
}
seq_along(nrow(desnum(experiment)
)
)
nrow(desnum(experiment))
seq_along(nrow(desnum(experiment)))
pair_sums <- NULL
for (i in 1:ncol(exp_pairs)){
pair_sums_current = 0
# Look for each experiment
for (j in 1:nrow(desnum(experiment))){
el1 <- which(colnames(desnum(experiment)) == exp_pairs[1,i])
el2 <- which(colnames(desnum(experiment)) == exp_pairs[1,i])
if (desnum(experiment)[j,el1] == 1 & desnum(experiment)[j,el2] == 1){
pair_sums_current = pair_sums_current + 1
}
}
pair_sums <- c(pair_sums,pair_sums_current)
}
pair_sums <- NULL
for (i in 1:ncol(exp_pairs)){
pair_sums_current = 0
# Look for each experiment
for (j in 1:nrow(desnum(experiment))){
el1 <- which(colnames(desnum(experiment)) == exp_pairs[1,i])
el2 <- which(colnames(desnum(experiment)) == exp_pairs[2,i])
if (desnum(experiment)[j,el1] == 1 & desnum(experiment)[j,el2] == 1){
pair_sums_current = pair_sums_current + 1
}
}
pair_sums <- c(pair_sums,pair_sums_current)
}
exp_pairs[2,i]
LETTERS[1:10]
exp_pairs <- combn(c("A", "B", "C",
"D", "E", "F",
"G", "H", "J",
"K",2))
exp_pairs <- combn(c("A", "B", "C",
"D", "E", "F",
"G", "H", "J",
"K")2)
exp_pairs <- combn(c("A", "B", "C",
"D", "E", "F",
"G", "H", "J",
"K"),2)
exp_pairs
pair_sums <- NULL
for (i in 1:ncol(exp_pairs)){
pair_sums_current = 0
# Look for each experiment
for (j in 1:nrow(desnum(experiment))){
el1 <- which(colnames(desnum(experiment)) == exp_pairs[1,i])
el2 <- which(colnames(desnum(experiment)) == exp_pairs[2,i])
if (desnum(experiment)[j,el1] == 1 & desnum(experiment)[j,el2] == 1){
pair_sums_current = pair_sums_current + 1
}
}
pair_sums <- c(pair_sums,pair_sums_current)
}
pair_sums <- NULL
for (i in 1:ncol(exp_pairs)){
pair_sums_current = 0
# Look for each experiment
for (j in 1:nrow(desnum(experiment))){
el1 <- which(colnames(desnum(experiment)) == exp_pairs[1,i])
el2 <- which(colnames(desnum(experiment)) == exp_pairs[2,i])
if (desnum(experiment)[j,el1] == 1 & desnum(experiment)[j,el2] == 1){
pair_sums_current = pair_sums_current + 1
}
}
pair_sums <- c(pair_sums,pair_sums_current)
}
pair_sums
pair_sums <- NULL
for (i in 1:ncol(exp_pairs)){
pair_sums_current = 0
# Look for each experiment
for (j in 1:nrow(desnum(experiment))){
el1 <- which(colnames(desnum(experiment)) == exp_pairs[1,i])
el2 <- which(colnames(desnum(experiment)) == exp_pairs[2,i])
if (desnum(experiment)[j,el1] == 1 & desnum(experiment)[j,el2] == 1){
pair_sums_current = pair_sums_current + 1
}
}
pair_sums <- c(pair_sums,pair_sums_current)
}
names(pair_sums) <- apply(exp_pairs,2,function(x){
paste0(x[1],x[2])
})
pair_sums
Sys.setenv(PATH = paste("/home/OZANAYGUN/anaconda/bin", Sys.getenv("PATH"), sep=":"))
install.packages('randomForest')
install.packages('pander')
install.packages(c("quanteda","irlba"))
library(quanteda)
library(irlba)
library(randomForest)
spam.raw <- read.csv(file = "tutorials/Introduction to Text Analytics with R/spam.csv", stringsAsFactors =  FALSE)
spam.raw <- read.csv(file = "tutorials/Introduction-to-Text-Analytics-with-R/spam.csv", stringsAsFactors =  FALSE)
setwd("D:/Data_science/GitHub/Text_Analytics")
download.file("tutorials/Introduction to Text Analytics with R/spam.csv",
destfile = "spam.csv")
spam.raw <- read.csv(file = 'spam.csv' , stringsAsFactors =  FALSE)
download.file("tutorials/Introduction to Text Analytics with R/spam.csv",
destfile = "spam.csv")
download.file("https://tutorials/Introduction to Text Analytics with R/spam.csv",
destfile = "spam.csv")
spam.raw <- read.csv(file = 'spam.csv' , stringsAsFactors =  FALSE)
download.file("http://tutorials/Introduction to Text Analytics with R/spam.csv",
destfile = "spam.csv")
spam.raw <- read.csv(file = 'spam.csv' , stringsAsFactors =  FALSE)
download.file("http://tutorials/Introduction to Text Analytics with R/spam.csv ",
destfile = "spam.csv")
download.file("http://github.com/datasciencedojo/tutorials/Introduction to Text Analytics with R/spam.csv ",
destfile = "spam.csv")
spam.raw <- read.csv(file = 'spam.csv' , stringsAsFactors =  FALSE)
download.file("http://github.com/datasciencedojo/tutorials/Introduction to Text Analytics with R/spam.csv ",
destfile = "spam.csv")
spam.raw <- read.csv(file = 'spam.csv' , stringsAsFactors =  FALSE)
download.file("https://github.com/datasciencedojo/tutorials/Introduction to Text Analytics with R/spam.csv ",
destfile = "spam.csv")
spam.raw <- read.csv(file = 'spam.csv' , stringsAsFactors =  FALSE)
download.file("https://github.com/datasciencedojo/tutorials/Introduction to Text Analytics with R/spam.csv",
destfile = "spam.csv")
download.file("http://github.com/datasciencedojo/tutorials/Introduction to Text Analytics with R/spam.csv",
destfile = "spam.csv")
download.file("https://github.com/datasciencedojo/tutorials/blob/master/Introduction%20to%20Text%20Analytics%20with%20R/spam.csv",
destfile = "spam.csv")
spam.raw <- read.csv(file = 'spam.csv' , stringsAsFactors =  FALSE)
View(spam.raw)
spam.raw <- read.csv(file = 'spam.csv' , stringsAsFactors =  FALSE)
View(spam.raw)
str(spam.raw)
spam.raw <- spam.raw[,1:2]
View(spam.raw)
names(spam.raw) <- c("Label","Text")
View(spam.raw)
length(complete.cases(spam.raw))
length(!complete.cases(spam.raw))
which(!complete.cases(spam.raw))
length(which(!complete.cases(spam.raw)))
spam.raw$Label <- factor(spam.raw$Label)
prop.table(spam.raw$Label)
prop.table(table(spam.raw$Label))
table(spam.raw$Label)
spam.raw$TextLength <- nchar(spam.raw$Text)
summary(spam.raw$TextLength)
library(ggplot2)
ggplot(spam.raw,aes(x = TextLength))+
geom_histogram()
ggplot(spam.raw,aes(x = TextLength))+
geom_histogram(bins = 100)
library(ggplot2)
ggplot(spam.raw,aes(x = TextLength, fill = Label))+
geom_histogram(binwidth = 5)+
theme_bw()
# Data split
library(caret)
set.seed(32984)
indexes <- createDataPartition(y = spam.raw$Label,
p = 0.7, list = FALSE)
train <- spam.raw[indexes,]
test <- spam.raw[-indexes,]
prop.table(table(train$Label))
prop.table(table(test$Label))
knitr::opts_chunk$set(echo = TRUE)
train$Text[21]
train$Text[38]
library(quanteda)
train.tokens <- tokens(train$Text,what = "Word",
remove_numbers = TRUE,
remove_punct = TRUE,
remove_symbols = TRUE,
remove_hyphens = TRUE)
train.tokens <- tokens(train$Text,what = "word",
remove_numbers = TRUE,
remove_punct = TRUE,
remove_symbols = TRUE,
remove_hyphens = TRUE)
View(train.tokens)
# Returns a list-like object that contains tokens
train.tokens[[357]]
tokens(train$Text,what = "word",
remove_numbers = TRUE,
remove_punct = TRUE,
remove_symbols = TRUE,
remove_hyphens = TRUE,
n_grams = 3)[[357]]
tokens(train$Text,what = "word",
remove_numbers = TRUE,
remove_punct = TRUE,
remove_symbols = TRUE,
remove_hyphens = TRUE,
ngrams = 3)[[357]]
train.tokens <- tokens_tolower(train.tokens)
train.tokens[[357]]
quanteda::stopwords()
# Remove stopwords
train.tokens <- tokens_select(x = train.tokens,
pattern = stopwords(),
selection = "remove")
train.tokens[[357]]
train.tokens <- tokens_wordstem(train.tokens,
language = "english")
train.tokens[[357]]
# Use quantida function dfm
train.tokens.dfm <- dfm(x = train.tokens,
tolower = FALSE)
View(train.tokens.dfm)
# Generates a very large matrix:
dim(train.tokens.dfm)
# Convert to genuie matrix:
train.tokens.matrix <- as.matrix(train.tokens.dfm)
head(train.tokens.matrix[,1:30])
colnames(train.tokens.matrix)[1:50]
train.tokens.df <- cbind(Label= train$Label,
data.frame(train.tokens.dfm))
View(train.tokens.df)
head(train.tokens)
head(train.tokens.df)
train.tokens.df <- cbind(Label= train$Label,
convert(train.tokens.dfm, to = "data.frame"))
head(train.tokens.df)
names(train.tokens.df)[c(146)]
names(train.tokens.df)[c(147)]
names(train.tokens.df)[c(148)]
head(train.tokens.df[,1:10])
train.tokens.df <- cbind(Label= train$Label,
convert(train.tokens.dfm, to = "data.frame"))
head(train.tokens.df[,1:10])
names(train.tokens.df)[c(146,148,235,238)]
names(train.tokens.df) <- make.names(names(train.tokens.df))
names(train.tokens.df) <- make.names(names(train.tokens.df))
names(train.tokens.df)[c(146,148,235,238)]
library(caret)
library(caret)
set.seed(48743)
cv.folds <- createMultiFolds(y = train$Label,
k = 10,
times = 3)
install.packages("doSNOW")
parallel:::detectCores()
